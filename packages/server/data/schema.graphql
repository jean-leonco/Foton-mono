input CreateProductInput {
  name: String!
  description: String!
  price: Float!
  clientMutationId: String
}

type CreateProductPayload {
  product: ProductType
  error: String
  clientMutationId: String
}

input DeleteProductInput {
  id: ID!
  clientMutationId: String
}

type DeleteProductPayload {
  message: String
  error: String
  clientMutationId: String
}

type Mutation {
  UserLoginWithEmail(input: UserLoginWithEmailInput!): UserLoginWithEmailPayload
  UserRegisterWithEmail(input: UserRegisterWithEmailInput!): UserRegisterWithEmailPayload
  CreateProductMutation(input: CreateProductInput!): CreateProductPayload
  UpdateProductMutation(input: UpdateProductInput!): UpdateProductPayload
  DeleteProductMutation(input: DeleteProductInput!): DeleteProductPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfoExtended {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A connection to a list of items."""
type ProductConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [ProductEdge]!
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge"""
  node: ProductType!

  """A cursor for use in pagination"""
  cursor: String!
}

"""Product data"""
type ProductType implements Node {
  """The ID of an object"""
  id: ID!
  _id: ID
  name: String
  description: String
  price: Float
}

"""The root of all... queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  me: User
  products(after: String, first: Int, before: String, last: Int, search: String): ProductConnection
  product(id: ID!): ProductType
}

type Subscription {
  UserAdded: UserAddedPayload
}

input UpdateProductInput {
  id: ID!
  name: String!
  description: String!
  price: Float!
  clientMutationId: String
}

type UpdateProductPayload {
  product: ProductType
  error: String
  clientMutationId: String
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  _id: String
  name: String
  email: String
  active: Boolean
}

type UserAddedPayload {
  userEdge: UserEdge
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User!

  """A cursor for use in pagination"""
  cursor: String!
}

input UserLoginWithEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserLoginWithEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

input UserRegisterWithEmailInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

type UserRegisterWithEmailPayload {
  token: String
  error: String
  clientMutationId: String
}
